{
  "Grammar": [
    "Pro → D I",
    "D → DL ; D | ɛ",
    "DL → T : id | F : id",
    "T → char | int | bool | string",
    "F → function ( P ) : T | function ( ) : T",
    "I → IL ; I | ɛ",
    "IL → if ( E ) { I } IFS | while ( E ) { I } | id = E | id = function ( Par ) { I } | id = function ( ) { I }",
    "IFS → else { I } | ɛ",
    "E → id ( P' ) | id ( ) | EL opari E | EL opbol E | EL oprel E | opneg E | opnot E | ( E ) | EL",
    "EL → nb | id | str | litteral | true | false",
    "P → T | T , P",
    "P' → E | E , P'",
    "Par → id : T | id : T , Par"
  ]

}
